import { Button, VerticalBox } from "std-widgets.slint";
import { LineEdit } from "std-widgets.slint";
import { StandardButton } from "std-widgets.slint";
import { CheckBox,ComboBox } from "std-widgets.slint";
import { GroupBox, HorizontalBox } from "std-widgets.slint";
import { GridBox } from "std-widgets.slint";


export component AppWindow inherits Window {
    in-out property <int> counter: 42;
    in property <bool> widgets-enabled: true;
    in-out property <string> selected_backup_mode: "Automatic";
    in-out property <[string]> file_formats: [];
    in-out property <string> file_format_input: "";
    in-out property <string> formatted_file_formats: "";


    callback quit_button_clicked();
    callback save_button_clicked();
    callback add_file_formats();



    VerticalBox {

        GridLayout {
        spacing: 24px;
            Row{
               Text { text: "Source Backup:"; vertical-alignment: center ; horizontal-alignment: left; }
               HorizontalLayout {
                    colspan: 3;
                    LineEdit {
                               input-type: password;
                                horizontal_stretch: 1;
                    }
                    /*
                    le_manifest := LineEdit {
                                    enabled: !root.deptree-pane-visible;
                                    accepted => { root.reload-manifest(le_manifest.text); }
                                    horizontal_stretch: 1;
                                }
                    */
                    Button {
                         text: "ðŸ“‚";
                           // clicked => { root.show-open-dialog(); }
                            clicked => {  }
                    }


               }
            }
            Row{
                Text { text: "Destination Backup:"; vertical-alignment: center; horizontal-alignment: left; }
                               HorizontalLayout {
                                    colspan: 3;
                                    LineEdit {
                                                input-type: password;
                                                horizontal_stretch: 1;
                                    }
                                    /*
                                    le_manifest := LineEdit {
                                                    enabled: !root.deptree-pane-visible;
                                                    accepted => { root.reload-manifest(le_manifest.text); }
                                                    horizontal_stretch: 1;
                                                }
                                    */
                                    Button {
                                         text: "ðŸ“‚";
                                           // clicked => { root.show-open-dialog(); }
                                            clicked => {  }
                                    }


                               }
            }
            Row{
                        Text { text: "Type Backup:"; vertical-alignment: center; horizontal-alignment: left; }
                        HorizontalLayout {
                            ComboBox {
                                model: ["Automatic", "Manual"];
                                current-value <=> root.selected_backup_mode;
                                enabled: widgets-enabled;
                            }

                            LineEdit {
                                visible: root.selected_backup_mode == "Manual";
                                placeholder-text: "Type file(es: pdf)";
                                horizontal_stretch: 1;
                                text <=> root.file_format_input;
                            }
                            Button {
                                visible: root.selected_backup_mode == "Manual";
                                text: "âž• Add";
                                clicked => {
                                    if (root.file_format_input != "") {
                                        root.add_file_formats();
                                        root.file_format_input = "";
                                    }
                                }
                            }
                        }
                    }
            Row {
                Text { text: "Formats File:"; vertical-alignment: center; horizontal-alignment: left; }

            }





            }

        padding-top: 46px /* header line height in design */
                             + /* extra top-padding in design */ 27px;
        spacing: 24px;



        HorizontalBox {
                alignment: space_between;
                Button {
                    text: "Abort";
                    clicked => {
                        root.quit_button_clicked();
                    }
                }
                Button {
                    text: "Save";
                    clicked => {
                        root.save_button_clicked(); // Collegato al nuovo callback
                    }
                }
        }



    }
}

export component ErrorMessage inherits Window {
    callback exit_button_clicked();

    VerticalBox {
        Text {
            text: "Error: configuration file was not found or is incorrect. The program will be terminated";
            font-size: 15px;
        }

        spacing: 24px;

        HorizontalLayout {
            alignment: center;
            Button {
                text: "Exit";
                width: 150px;
                clicked => {
                    root.exit_button_clicked();
                }
            }
        }
    }
}

export component ConfirmMessage inherits Window {
    callback abort_button_clicked();

    VerticalBox {
        Text {
            text: "First command recognised correctly. To continue with the backup, please insert the confirm command";
            font-size: 15px;
        }

        spacing: 24px;

        HorizontalLayout {
            alignment: center;
            Button {
                text: "Abort backup";
                width: 150px;
                clicked => {
                    root.abort_button_clicked();
                }
            }
        }
    }
}

export component BackupCompletedMessage inherits Window {
    callback close_button_clicked();

    VerticalBox {
        Text {
            text: "Backup correctly executed";
            font-size: 15px;
        }

        spacing: 24px;

        HorizontalLayout {
            alignment: center;
            Button {
                text: "Close";
                width: 150px;
                clicked => {
                    root.close_button_clicked();
                }
            }
        }
    }
}

export component BackupErrorMessage inherits Window {
    callback close_button_clicked();

    VerticalBox {
        Text {
            text: "Error: source path was not found";
            font-size: 15px;
        }

        spacing: 24px;

        HorizontalLayout {
            alignment: center;
            Button {
                text: "Close";
                width: 150px;
                clicked => {
                    root.close_button_clicked();
                }
            }
        }
    }
}